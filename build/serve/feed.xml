<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marcelo Lazaroni</title>
    <description>Developing for the Interwebs</description>
    <link>lazamar.github.io</link>
    <atom:link href="lazamar.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Runnning a Raspberry Pi with an HDMI adapter.</title>
        <description>&lt;p&gt;Well, that seems pretty trivial, right? You just connect the adapter and it
should just work. Well, it should, but it doesn&amp;#39;t.&lt;/p&gt;

&lt;p&gt;What in fact happens is that your adapter prevents your Pi from detecting that
there is something connected to the HDMI output, so it doesn&amp;#39;t broadcast anything
through there and all you will see is a black screen making you wonder whether
your Pi is really working and whether you should have gone for that more expensive
adapter since this one is not working. Good news for you, it is none of the two.&lt;/p&gt;

&lt;p&gt;There is a simple fix for that. We just need to change the Pi&amp;#39;s &amp;quot;BIOS&amp;quot; configuration.
Well, the Raspberry Pi in fact does not have a BIOS like other bigger computers
do. It has a file called &lt;code&gt;confix.txt&lt;/code&gt; which is read by the GPU before the ARM core
is initialised. All we need to do is to go to that file and uncomment the line
where it says &lt;code&gt;hdmi_safe=1&lt;/code&gt;. To do that run:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='bash'&gt;sudo nano /boot/config.txt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now look for the line where it says
```&lt;/p&gt;

&lt;h1&gt;hdmi_safe=1&lt;/h1&gt;

&lt;p&gt;``&lt;code&gt;
and remove the&lt;/code&gt;#` from the beginning of the sentence.&lt;/p&gt;

&lt;p&gt;Now press &lt;code&gt;Ctrl + X&lt;/code&gt; and then press &lt;code&gt;y&lt;/code&gt; and then &lt;code&gt;Enter&lt;/code&gt;. Now restart your Pi
and enjoy!&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Oct 2015 00:00:00 +0100</pubDate>
        <link>lazamar.github.io/pi-with-hdmi-adapter/</link>
        <guid isPermaLink="true">lazamar.github.io/pi-with-hdmi-adapter/</guid>
      </item>
    
      <item>
        <title>Closures - Private Variables and Methods in JavaScript</title>
        <description>&lt;p&gt;Some languages such as Java allow us to declare methods and variables in a class
as private, restraining anything outside the class itself to access them.&lt;/p&gt;

&lt;p&gt;This is very important to achieve encapsulation and conform to the best
practices of object oriented programing. Making a variable private also allows
the function to have total control over how it is manipulated.&lt;/p&gt;

&lt;p&gt;JavaScript, however, does not allow you to specify whether variables and methods
of an object should be private or public in their declaration, but it does
give us a way to implement them as such.&lt;/p&gt;

&lt;p&gt;Give a look at the following code:
&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;var myBankAccount = (function(){
  var balance = 0;&lt;/p&gt;

&lt;p&gt;return{
    getBalance: function(){
                  return balance
                }
  }
})()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Here we are declaring a variable, &lt;code&gt;myBankAccount&lt;/code&gt;, and assigning something to it.
In the other sign of the assignment we are then declaring a function, but notice
that this function declaration is within brackets and at the end, in the last
line, there is a &lt;code&gt;()&lt;/code&gt;. This means that we are invoking this function that we just
declared. So, &lt;code&gt;myBankAccount&lt;/code&gt; is not being assigned the function, but because the
function is being called &lt;code&gt;myBankAccount&lt;/code&gt; is being assigned the return value of
the function.&lt;/p&gt;

&lt;p&gt;The return value of that function is an object with one property, &lt;code&gt;getBalance&lt;/code&gt;.
But this object is very interesting
because unlike anything outside the function it has access to the
balance variable, which only exists inside the function. Even though the function
has returned already, because the returned object still references variables of
the the function, these variables become long lived and will not
be destroyed. We can get the balance by executing &lt;code&gt;myBankAccount.getBalance()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This way we have actually created an object with a private property. This is
called a &lt;strong&gt;closure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s make it more interesting and add a couple more things.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;var bankAccount = function(initialBalance){
  // Let's initialise the balance with the value passed as an argument
  // to the function.

  var balance = initialBalance;

  return {
    getBalance: function(){
      return balance
    },
    deposit: function(amount){
      // Let's add the amount to what we already have in the
      //  balance.
      balance += amount;
      // Return the new balance
      return balance;
    },
    withdraw: function(amount){
      // Check if we have enought money to withdraw all that.
      if(amount &amp;lt;= balance){
        balance -= amount;
        return true;
      }
      else{
        return false;
      }
    }
  }
}

var marceloAccount = bankAccount(100);

marceloAccount.deposit(10) // 110
marceloAccount. withdraw(80) // true
marceloAccount. withdraw(80) // false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we did a couple of things differently. Now we are not declaring an anonymous
function and calling it straight away, we are assigning the function to a variable
and only then we invoke the function variable to create an instance of the bank
account, which we assign to &lt;code&gt;karlAccount&lt;/code&gt;. &lt;code&gt;bankAccount&lt;/code&gt; returns an object with
three properties: &lt;code&gt;getBalance&lt;/code&gt;, which gives us the current balance; &lt;code&gt;deposit&lt;/code&gt;,
which adds to our balance; and &lt;code&gt;withdraw&lt;/code&gt;, which takes money from the balance.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s where closures really shine. Here we were able to use a private function,
&lt;code&gt;takeFromBalance&lt;/code&gt;, to implement our specific rules to the way in which our
private variable should be changed. In this case we are not allowing it to be negative.&lt;/p&gt;

&lt;p&gt;Closures are an excellent way to keep things tidy and working properly. With
closures we can build code that is more secure and more robust as we are
controlling how things are being changed. We can also build things that are easier
to test and debug, as we know exactly what has access to what, as well as easier
to reuse.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Oct 2015 00:00:00 +0100</pubDate>
        <link>lazamar.github.io/closures-private-variables-and-methods-in-javascript/</link>
        <guid isPermaLink="true">lazamar.github.io/closures-private-variables-and-methods-in-javascript/</guid>
      </item>
    
  </channel>
</rss>